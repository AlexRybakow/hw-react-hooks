{"version":3,"sources":["components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","useState","minutes","seconds","time","setTime","timer","setTimer","className","onClick","timeInterval","setInterval","updatedTime","clearInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAkDeA,EAhDD,WAAO,IAAD,EACQC,mBAAS,CAC7BC,QAAS,EACTC,QAAS,IAHG,mBACTC,EADS,KACHC,EADG,OAMUJ,mBAAS,MANnB,mBAMTK,EANS,KAMFC,EANE,KAoChB,OACI,gCACI,qBAAIC,UAAU,QAAd,UACCJ,EAAKF,QAAU,GAAf,WAAwBE,EAAKF,SAAYE,EAAKF,QAD/C,IAEKE,EAAKD,QAAU,GAAf,WAAwBC,EAAKD,SAAYC,EAAKD,WAEnD,wBAAQM,QAlCG,WACf,IAAIC,EAAeC,aAAY,WAC3BN,GAAQ,SAACD,GACL,IAAMQ,EAAW,eAAQR,GAczB,OAbIA,EAAKD,QAAU,GACfS,EAAYT,UAGK,IAAjBC,EAAKD,UACgB,IAAjBC,EAAKF,QACLW,cAAcH,GACPN,EAAKF,QAAU,IACtBU,EAAYV,UACZU,EAAYT,QAAU,KAIvBS,OAEZ,KACHL,EAASG,IAcL,mBACA,wBAAQD,QAZE,WACdI,cAAcP,IAWV,sB,MClCGQ,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACA,cAAC,EAAD,OCMWO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82192311.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst Timer = () => {\r\n    const [time, setTime] = useState({\r\n        minutes: 1,\r\n        seconds: 0,\r\n    });\r\n\r\n    const [timer, setTimer] = useState(null);\r\n\r\n    const startTimer = () => {\r\n        let timeInterval = setInterval(() => {\r\n            setTime((time) => {\r\n                const updatedTime = { ...time };\r\n                if (time.seconds > 0) {\r\n                    updatedTime.seconds--;\r\n                }\r\n\r\n                if (time.seconds === 0) {\r\n                    if (time.minutes === 0) {\r\n                        clearInterval(timeInterval);\r\n                    } else if (time.minutes > 0) {\r\n                        updatedTime.minutes--;\r\n                        updatedTime.seconds = 59;\r\n                    } \r\n                }\r\n\r\n                return updatedTime;\r\n            });\r\n        }, 1000);\r\n        setTimer(timeInterval);\r\n    };\r\n\r\n    const stopTimer = () => {\r\n        clearInterval(timer);\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1 className='timer'>\r\n            {time.minutes < 10 ? `0${time.minutes}` : time.minutes}:\r\n                {time.seconds < 10 ? `0${time.seconds}` : time.seconds}\r\n            </h1>\r\n            <button onClick={startTimer}>START</button>\r\n            <button onClick={stopTimer}>STOP</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Timer;\r\n\r\n\r\n","import Timer from './components/Timer.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}